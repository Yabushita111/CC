{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { parseQueryString } from \"../../utils/url\";\nimport Game from \"../../components/game\";\nimport { fetchFrames, reloadGame, toggleGamePause, toggleTheme, setGameOptions, stepForwardFrame, stepBackwardFrame, stepToTurn, highlightSnake, pauseGameAction, togglePlayButtons } from \"../../actions\";\nconst options = parseQueryString(window.location.search);\n\nif (typeof options.autoplay !== \"undefined\") {\n  options.autoplay = options.autoplay === \"true\";\n}\n\nif (typeof options.showFrameScrubber !== \"undefined\") {\n  options.showFrameScrubber = options.showFrameScrubber === \"true\";\n}\n\nconst mapStateToProps = state => {\n  const gameState = state.game;\n  const settings = state.settings;\n  return {\n    options: { ...settings,\n      ...options\n    },\n    ruleset: gameState.ruleset,\n    grid: gameState.grid,\n    gameNotFound: gameState.gameNotFound,\n    paused: gameState.paused,\n    currentFrame: gameState.currentFrame,\n    frames: gameState.frames,\n    highlightedSnake: gameState.highlightedSnake,\n    theme: options.boardTheme || settings.theme,\n    hasAllFrames: !!gameState.endEvent\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setGameOptions: options => dispatch(setGameOptions(options)),\n  fetchFrames: () => dispatch(fetchFrames()),\n  toggleTheme: theme => dispatch(toggleTheme(theme)),\n  reloadGame: () => dispatch(reloadGame()),\n  toggleGamePause: paused => dispatch(toggleGamePause(paused)),\n  pauseGame: () => dispatch(pauseGameAction()),\n  stepForwardFrame: () => dispatch(stepForwardFrame()),\n  stepBackwardFrame: () => dispatch(stepBackwardFrame()),\n  stepToTurn: i => dispatch(stepToTurn(i)),\n  highlightSnake: snakeId => dispatch(highlightSnake(snakeId)),\n  togglePlayButtons: showHide => dispatch(togglePlayButtons(showHide))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/yabust/CC/board/src/components/game/GamePage.jsx"],"names":["connect","parseQueryString","Game","fetchFrames","reloadGame","toggleGamePause","toggleTheme","setGameOptions","stepForwardFrame","stepBackwardFrame","stepToTurn","highlightSnake","pauseGameAction","togglePlayButtons","options","window","location","search","autoplay","showFrameScrubber","mapStateToProps","state","gameState","game","settings","ruleset","grid","gameNotFound","paused","currentFrame","frames","highlightedSnake","theme","boardTheme","hasAllFrames","endEvent","mapDispatchToProps","dispatch","pauseGame","i","snakeId","showHide"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport { parseQueryString } from \"../../utils/url\";\nimport Game from \"../../components/game\";\nimport {\n  fetchFrames,\n  reloadGame,\n  toggleGamePause,\n  toggleTheme,\n  setGameOptions,\n  stepForwardFrame,\n  stepBackwardFrame,\n  stepToTurn,\n  highlightSnake,\n  pauseGameAction,\n  togglePlayButtons\n} from \"../../actions\";\n\nconst options = parseQueryString(window.location.search);\nif (typeof options.autoplay !== \"undefined\") {\n  options.autoplay = options.autoplay === \"true\";\n}\nif (typeof options.showFrameScrubber !== \"undefined\") {\n  options.showFrameScrubber = options.showFrameScrubber === \"true\";\n}\n\nconst mapStateToProps = state => {\n  const gameState = state.game;\n  const settings = state.settings;\n\n  return {\n    options: { ...settings, ...options },\n    ruleset: gameState.ruleset,\n    grid: gameState.grid,\n    gameNotFound: gameState.gameNotFound,\n    paused: gameState.paused,\n    currentFrame: gameState.currentFrame,\n    frames: gameState.frames,\n    highlightedSnake: gameState.highlightedSnake,\n    theme: options.boardTheme || settings.theme,\n    hasAllFrames: !!gameState.endEvent\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setGameOptions: options => dispatch(setGameOptions(options)),\n  fetchFrames: () => dispatch(fetchFrames()),\n  toggleTheme: theme => dispatch(toggleTheme(theme)),\n  reloadGame: () => dispatch(reloadGame()),\n  toggleGamePause: paused => dispatch(toggleGamePause(paused)),\n  pauseGame: () => dispatch(pauseGameAction()),\n  stepForwardFrame: () => dispatch(stepForwardFrame()),\n  stepBackwardFrame: () => dispatch(stepBackwardFrame()),\n  stepToTurn: i => dispatch(stepToTurn(i)),\n  highlightSnake: snakeId => dispatch(highlightSnake(snakeId)),\n  togglePlayButtons: showHide => dispatch(togglePlayButtons(showHide))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}