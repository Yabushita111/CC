{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"../reducers\";\nimport settingsReducer, { settingsStoreListener } from \"../components/settings/settings-slice\";\nimport { initialSettings } from \"../components/settings/defaults\";\nimport { themes } from \"../theme\";\nimport { rehydrateLocalSettings, storageAvailable } from \"./storage\";\n\nfunction rehydrateInitialState() {\n  let initialState = {\n    game: {\n      options: null,\n      grid: [],\n      frames: [],\n      endEvent: null,\n      paused: true,\n      gameNotFound: false,\n      highlightedSnake: null,\n      theme: themes.light\n    },\n    settings: initialSettings\n  };\n\n  if (storageAvailable(\"localStorage\")) {\n    initialState.settings = rehydrateLocalSettings();\n    initialState.settings.persistAvailable = true;\n  } else {\n    console.info(\"Please enable localStorage for an improved experience that allows you to persist board settings.\");\n  }\n\n  return initialState;\n}\n\nconst store = configureStore({\n  reducer: {\n    game: rootReducer,\n    settings: settingsReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: false\n  }),\n  preloadedState: rehydrateInitialState()\n});\nstore.subscribe(() => {\n  settingsStoreListener(store.getState());\n});\nexport default store;","map":{"version":3,"sources":["/Users/yabu/CC/board/src/app/store.js"],"names":["configureStore","rootReducer","settingsReducer","settingsStoreListener","initialSettings","themes","rehydrateLocalSettings","storageAvailable","rehydrateInitialState","initialState","game","options","grid","frames","endEvent","paused","gameNotFound","highlightedSnake","theme","light","settings","persistAvailable","console","info","store","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","preloadedState","subscribe","getState"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,eAAP,IACEC,qBADF,QAEO,uCAFP;AAGA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,sBAAT,EAAiCC,gBAAjC,QAAyD,WAAzD;;AAEA,SAASC,qBAAT,GAAiC;AAC/B,MAAIC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,IAAI,EAAE,EAFF;AAGJC,MAAAA,MAAM,EAAE,EAHJ;AAIJC,MAAAA,QAAQ,EAAE,IAJN;AAKJC,MAAAA,MAAM,EAAE,IALJ;AAMJC,MAAAA,YAAY,EAAE,KANV;AAOJC,MAAAA,gBAAgB,EAAE,IAPd;AAQJC,MAAAA,KAAK,EAAEb,MAAM,CAACc;AARV,KADW;AAWjBC,IAAAA,QAAQ,EAAEhB;AAXO,GAAnB;;AAcA,MAAIG,gBAAgB,CAAC,cAAD,CAApB,EAAsC;AACpCE,IAAAA,YAAY,CAACW,QAAb,GAAwBd,sBAAsB,EAA9C;AACAG,IAAAA,YAAY,CAACW,QAAb,CAAsBC,gBAAtB,GAAyC,IAAzC;AACD,GAHD,MAGO;AACLC,IAAAA,OAAO,CAACC,IAAR,CACE,kGADF;AAGD;;AAED,SAAOd,YAAP;AACD;;AAED,MAAMe,KAAK,GAAGxB,cAAc,CAAC;AAC3ByB,EAAAA,OAAO,EAAE;AACPf,IAAAA,IAAI,EAAET,WADC;AAEPmB,IAAAA,QAAQ,EAAElB;AAFH,GADkB;AAK3BwB,EAAAA,UAAU,EAAEC,oBAAoB,IAC9BA,oBAAoB,CAAC;AACnBC,IAAAA,cAAc,EAAE,KADG;AAEnBC,IAAAA,iBAAiB,EAAE;AAFA,GAAD,CANK;AAU3BC,EAAAA,cAAc,EAAEtB,qBAAqB;AAVV,CAAD,CAA5B;AAaAgB,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpB5B,EAAAA,qBAAqB,CAACqB,KAAK,CAACQ,QAAN,EAAD,CAArB;AACD,CAFD;AAIA,eAAeR,KAAf","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"../reducers\";\nimport settingsReducer, {\n  settingsStoreListener\n} from \"../components/settings/settings-slice\";\nimport { initialSettings } from \"../components/settings/defaults\";\nimport { themes } from \"../theme\";\nimport { rehydrateLocalSettings, storageAvailable } from \"./storage\";\n\nfunction rehydrateInitialState() {\n  let initialState = {\n    game: {\n      options: null,\n      grid: [],\n      frames: [],\n      endEvent: null,\n      paused: true,\n      gameNotFound: false,\n      highlightedSnake: null,\n      theme: themes.light\n    },\n    settings: initialSettings\n  };\n\n  if (storageAvailable(\"localStorage\")) {\n    initialState.settings = rehydrateLocalSettings();\n    initialState.settings.persistAvailable = true;\n  } else {\n    console.info(\n      \"Please enable localStorage for an improved experience that allows you to persist board settings.\"\n    );\n  }\n\n  return initialState;\n}\n\nconst store = configureStore({\n  reducer: {\n    game: rootReducer,\n    settings: settingsReducer\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      immutableCheck: false,\n      serializableCheck: false\n    }),\n  preloadedState: rehydrateInitialState()\n});\n\nstore.subscribe(() => {\n  settingsStoreListener(store.getState());\n});\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}