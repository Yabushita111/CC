{"ast":null,"code":"import ReconnectingWebsocket from \"./reconnecting-websocket\"; // Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\n\nexport function streamAll(url, receive) {\n  const turns = {};\n  let done = false;\n  return new Promise((resolve, reject) => {\n    const ws = new ReconnectingWebsocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      const eventData = obj.Data;\n\n      if (turns[eventData.Turn]) {\n        return;\n      }\n\n      turns[eventData.Turn] = true;\n      done = receive(obj);\n\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/yabu/board/src/io/websocket.js"],"names":["ReconnectingWebsocket","streamAll","url","receive","turns","done","Promise","resolve","reject","ws","addEventListener","e","obj","JSON","parse","data","eventData","Data","Turn","close"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,0BAAlC,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AACtC,QAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,IAAI,GAAG,KAAX;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,EAAE,GAAG,IAAIT,qBAAJ,CAA0BE,GAA1B,CAAX;AACAO,IAAAA,EAAE,CAACC,gBAAH,CAAoB,SAApB,EAA+BC,CAAC,IAAI;AAClC,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAZ;AACA,YAAMC,SAAS,GAAGJ,GAAG,CAACK,IAAtB;;AACA,UAAIb,KAAK,CAACY,SAAS,CAACE,IAAX,CAAT,EAA2B;AACzB;AACD;;AACDd,MAAAA,KAAK,CAACY,SAAS,CAACE,IAAX,CAAL,GAAwB,IAAxB;AAEAb,MAAAA,IAAI,GAAGF,OAAO,CAACS,GAAD,CAAd;;AACA,UAAIP,IAAJ,EAAU;AACRI,QAAAA,EAAE,CAACU,KAAH;AACAZ,QAAAA,OAAO;AACR;AACF,KAbD;AAeAE,IAAAA,EAAE,CAACC,gBAAH,CAAoB,SAApB,EAA+BC,CAAC,IAAI;AAClCH,MAAAA,MAAM,CAACG,CAAD,CAAN;AACD,KAFD;AAIAF,IAAAA,EAAE,CAACC,gBAAH,CAAoB,SAApB,EAA+BC,CAAC,IAAI;AAClC,UAAI,CAACN,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,IAAP;AACAE,QAAAA,OAAO;AACR;AACF,KALD;AAMD,GA3BM,CAAP;AA4BD","sourcesContent":["import ReconnectingWebsocket from \"./reconnecting-websocket\";\n\n// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url, receive) {\n  const turns = {};\n  let done = false;\n\n  return new Promise((resolve, reject) => {\n    const ws = new ReconnectingWebsocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      const eventData = obj.Data;\n      if (turns[eventData.Turn]) {\n        return;\n      }\n      turns[eventData.Turn] = true;\n\n      done = receive(obj);\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}