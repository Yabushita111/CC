{"ast":null,"code":"/**\n * This file contains helper functions for async loading svg files that\n * can be injected inline into an html <svg> element. This is better than\n * alternatives for the following reasons:\n *\n *    <use href=\"...\"> has a problem where the game could start before the\n *    svg has finished loading whereas this method gives a promise we can wait\n *    for.\n *\n *    <image src=\"...\"> has a problem where the fill color of the image cannot\n *    be overriden. Inline svg solves this problem and allows css styles to\n *    cascade into the svg content. <use> may also have this problem?\n *\n *    Directly embedding the svg xml into react components (or similar) would\n *    mostly solve everything except that it eliminates the possibility of\n *    pulling in svg data from external trusted sources.\n *\n * The main downside to this method is that the source of the svg must be\n * trusted or else you are vulnerable to xss attacks.\n */\nconst loaded = {};\nconst doesntExist = {};\nexport function loadSvgs(paths) {\n  return Promise.all(paths.map(requireSvg));\n}\nexport function getSvg(path) {\n  return loaded[path];\n}\n\nfunction requireSvg(path) {\n  if (path in loaded) {\n    return Promise.resolve(loaded[path]);\n  }\n\n  return fetchSvg(path);\n}\n\nasync function fetchSvg(path) {\n  const response = await fetch(path);\n  const svgText = await response.text();\n  const svg = makeDom(svgText);\n  loaded[path] = svg;\n  return svg;\n}\n\nfunction makeDom(svgText) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = svgText.trim();\n  return wrapper.firstChild;\n}\n\nexport async function svgExists(path) {\n  if (path in loaded) {\n    return true;\n  }\n\n  if (path in doesntExist) {\n    return false;\n  } //not cached yet\n\n\n  try {\n    const response = await fetch(path);\n    const svgText = await response.text();\n    const exists = svgText.startsWith(\"<svg\");\n\n    if (!exists) {\n      doesntExist[path] = true;\n    }\n\n    return exists;\n  } catch (e) {\n    //Most likely a CORS issue for a specific svg\n    console.warn(e, path, \"Fallback to default\");\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/yabust/CC/board/src/utils/inline-svg.js"],"names":["loaded","doesntExist","loadSvgs","paths","Promise","all","map","requireSvg","getSvg","path","resolve","fetchSvg","response","fetch","svgText","text","svg","makeDom","wrapper","document","createElement","innerHTML","trim","firstChild","svgExists","exists","startsWith","e","console","warn"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAG,EAAf;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAOC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAN,CAAUC,UAAV,CAAZ,CAAP;AACD;AAED,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAC3B,SAAOT,MAAM,CAACS,IAAD,CAAb;AACD;;AAED,SAASF,UAAT,CAAoBE,IAApB,EAA0B;AACxB,MAAIA,IAAI,IAAIT,MAAZ,EAAoB;AAClB,WAAOI,OAAO,CAACM,OAAR,CAAgBV,MAAM,CAACS,IAAD,CAAtB,CAAP;AACD;;AAED,SAAOE,QAAQ,CAACF,IAAD,CAAf;AACD;;AAED,eAAeE,QAAf,CAAwBF,IAAxB,EAA8B;AAC5B,QAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,IAAD,CAA5B;AACA,QAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,QAAMC,GAAG,GAAGC,OAAO,CAACH,OAAD,CAAnB;AACAd,EAAAA,MAAM,CAACS,IAAD,CAAN,GAAeO,GAAf;AACA,SAAOA,GAAP;AACD;;AAED,SAASC,OAAT,CAAiBH,OAAjB,EAA0B;AACxB,QAAMI,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACAF,EAAAA,OAAO,CAACG,SAAR,GAAoBP,OAAO,CAACQ,IAAR,EAApB;AACA,SAAOJ,OAAO,CAACK,UAAf;AACD;;AAED,OAAO,eAAeC,SAAf,CAAyBf,IAAzB,EAA+B;AACpC,MAAIA,IAAI,IAAIT,MAAZ,EAAoB;AAClB,WAAO,IAAP;AACD;;AACD,MAAIS,IAAI,IAAIR,WAAZ,EAAyB;AACvB,WAAO,KAAP;AACD,GANmC,CAOpC;;;AACA,MAAI;AACF,UAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACJ,IAAD,CAA5B;AACA,UAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,UAAMU,MAAM,GAAGX,OAAO,CAACY,UAAR,CAAmB,MAAnB,CAAf;;AACA,QAAI,CAACD,MAAL,EAAa;AACXxB,MAAAA,WAAW,CAACQ,IAAD,CAAX,GAAoB,IAApB;AACD;;AACD,WAAOgB,MAAP;AACD,GARD,CAQE,OAAOE,CAAP,EAAU;AACV;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb,EAAgBlB,IAAhB,EAAsB,qBAAtB;AACA,WAAO,KAAP;AACD;AACF","sourcesContent":["/**\n * This file contains helper functions for async loading svg files that\n * can be injected inline into an html <svg> element. This is better than\n * alternatives for the following reasons:\n *\n *    <use href=\"...\"> has a problem where the game could start before the\n *    svg has finished loading whereas this method gives a promise we can wait\n *    for.\n *\n *    <image src=\"...\"> has a problem where the fill color of the image cannot\n *    be overriden. Inline svg solves this problem and allows css styles to\n *    cascade into the svg content. <use> may also have this problem?\n *\n *    Directly embedding the svg xml into react components (or similar) would\n *    mostly solve everything except that it eliminates the possibility of\n *    pulling in svg data from external trusted sources.\n *\n * The main downside to this method is that the source of the svg must be\n * trusted or else you are vulnerable to xss attacks.\n */\n\nconst loaded = {};\nconst doesntExist = {};\n\nexport function loadSvgs(paths) {\n  return Promise.all(paths.map(requireSvg));\n}\n\nexport function getSvg(path) {\n  return loaded[path];\n}\n\nfunction requireSvg(path) {\n  if (path in loaded) {\n    return Promise.resolve(loaded[path]);\n  }\n\n  return fetchSvg(path);\n}\n\nasync function fetchSvg(path) {\n  const response = await fetch(path);\n  const svgText = await response.text();\n  const svg = makeDom(svgText);\n  loaded[path] = svg;\n  return svg;\n}\n\nfunction makeDom(svgText) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = svgText.trim();\n  return wrapper.firstChild;\n}\n\nexport async function svgExists(path) {\n  if (path in loaded) {\n    return true;\n  }\n  if (path in doesntExist) {\n    return false;\n  }\n  //not cached yet\n  try {\n    const response = await fetch(path);\n    const svgText = await response.text();\n    const exists = svgText.startsWith(\"<svg\");\n    if (!exists) {\n      doesntExist[path] = true;\n    }\n    return exists;\n  } catch (e) {\n    //Most likely a CORS issue for a specific svg\n    console.warn(e, path, \"Fallback to default\");\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}