{"ast":null,"code":"import _toConsumableArray from\"/Users/yabu/CC/board/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/yabu/CC/board/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/yabu/CC/board/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/yabu/CC/board/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/yabu/CC/board/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{colors,themes}from\"../theme\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var HIGHLIGHT_DIM=0.15;var DEAD_OPACITY=0.1;var OVERLAP_OPACITY=0.3;var SNAKE_ON_SNAKE_OPACITY=0.8;var FULL_OPACITY=1.0;var CELL_SIZE=20;var CELL_SPACING=4;var FOOD_SIZE=(CELL_SIZE/3.25).toFixed(2);var END_OVERLAP=0.1;var DIRECTIONS_CW=[\"up\",\"right\",\"down\",\"left\"];// let GRID_COLUMNS = 0;  Unused for now.\nvar GRID_ROWS=0;function toGridSpaceX(slot){return(CELL_SIZE+CELL_SPACING)*slot+CELL_SPACING;}function toGridSpaceY(slot){// Y-Axis in board space is inverted, positive goes up\nreturn(CELL_SIZE+CELL_SPACING)*(GRID_ROWS-1-slot)+CELL_SPACING;}function getPartWidth(part){var extraWidth=part.direction===\"left\"||part.direction===\"right\"?2*CELL_SPACING:0;return CELL_SIZE+extraWidth;}function getPartHeight(part){var extraHeight=part.direction===\"up\"||part.direction===\"down\"?2*CELL_SPACING:0;return CELL_SIZE+extraHeight;}function getPartXOffset(part){var xBias=part.direction===\"left\"||part.direction===\"right\"?-CELL_SPACING:0;return toGridSpaceX(part.x)+xBias;}function getPartYOffset(part){var yBias=part.direction===\"up\"||part.direction===\"down\"?-CELL_SPACING:0;return toGridSpaceY(part.y)+yBias;}function getCornerPartXOffset(part,type){return toGridSpaceX(part.x)-CELL_SPACING;}function getCornerPartYOffset(part,type){return toGridSpaceY(part.y)-CELL_SPACING;}function getTailXOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"left\":return toGridSpaceX(part.x)-END_OVERLAP;case\"right\":return toGridSpaceX(part.x)+END_OVERLAP;default:return toGridSpaceX(part.x);}}function getTailYOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"up\":return toGridSpaceY(part.y)-END_OVERLAP;case\"down\":return toGridSpaceY(part.y)+END_OVERLAP;default:return toGridSpaceY(part.y);}}function getHeadXOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"left\":return toGridSpaceX(part.x)+END_OVERLAP;case\"right\":return toGridSpaceX(part.x)-END_OVERLAP;default:return toGridSpaceX(part.x);}}function getHeadYOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"up\":return toGridSpaceY(part.y)+END_OVERLAP;case\"down\":return toGridSpaceY(part.y)-END_OVERLAP;default:return toGridSpaceY(part.y);}}function getHeadFillerXOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"left\":return toGridSpaceX(part.x+1)-CELL_SPACING-END_OVERLAP;case\"right\":return toGridSpaceX(part.x)-CELL_SPACING-END_OVERLAP;default:return toGridSpaceX(part.x);}}function getHeadFillerYOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"up\":return toGridSpaceY(part.y-1)-CELL_SPACING-END_OVERLAP;case\"down\":return toGridSpaceY(part.y)-CELL_SPACING-END_OVERLAP;default:return toGridSpaceY(part.y);}}function getTailFillerXOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"right\":return toGridSpaceX(part.x+1)-CELL_SPACING-END_OVERLAP;case\"left\":return toGridSpaceX(part.x)-CELL_SPACING-END_OVERLAP;default:return toGridSpaceX(part.x);}}function getTailFillerYOffset(part){// apply slight offset to avoid ugly white line in between parts (works most of the time)\nswitch(part.direction){case\"down\":return toGridSpaceY(part.y-1)-CELL_SPACING-END_OVERLAP;case\"up\":return toGridSpaceY(part.y)-CELL_SPACING-END_OVERLAP;default:return toGridSpaceY(part.y);}}function getFillerWidth(part){return part.direction===\"left\"||part.direction===\"right\"?CELL_SPACING+2*END_OVERLAP:CELL_SIZE;}function getFillerHeight(part){return part.direction===\"left\"||part.direction===\"right\"?CELL_SIZE:CELL_SPACING+2*END_OVERLAP;}function getOpacity(snake,highlightedSnake){if(!snake.isDead){if(highlightedSnake){return snake._id===highlightedSnake?1:HIGHLIGHT_DIM;}}else{if(highlightedSnake){return snake._id===highlightedSnake?1:0;}}return snake.isDead?DEAD_OPACITY:1;}function getPartOpacity(part){if(part.shadeForOverlap){return SNAKE_ON_SNAKE_OPACITY;}else if(part.isOverlapped){return OVERLAP_OPACITY;}else{return FULL_OPACITY;}}function getPartColor(snake,part){if(part.shadeForOverlap){return colors.overlapSnake;}else{return snake.color;}}function range(size){var result=[];for(var i=0;i<size;i++){result.push(i);}return result;}function sortAliveSnakesOnTop(snakes,highlightedSnake){return snakes.concat().sort(function(a,b){var aOrder=a.isDead?0:1;var bOrder=b.isDead?0:1;// always put the highlighted snake up top\nif(a._id===highlightedSnake)aOrder=2;if(b._id===highlightedSnake)bOrder=2;return aOrder-bOrder;});}function getHeadTransform(direction,viewBox){var halfX=viewBox.width/2;var halfY=viewBox.height/2;switch(direction){case\"left\":return\"scale(-1,1) translate(-100, 0)\";case\"up\":return\"rotate(-90 \".concat(halfX,\" \").concat(halfY,\")\");case\"down\":return\"rotate(90 \".concat(halfX,\" \").concat(halfY,\")\");default:return\"\";}}function getTailTransform(direction,viewBox){var halfX=viewBox.width/2;var halfY=viewBox.height/2;switch(direction){case\"right\":return\"scale(-1,1) translate(-100,0)\";case\"down\":return\"scale(-1,1) translate(-100,0) rotate(-90 \".concat(halfX,\" \").concat(halfY,\")\");case\"up\":return\"scale(-1,1) translate(-100,0) rotate(90 \".concat(halfX,\" \").concat(halfY,\")\");default:return\"\";}}function areAdjacentDirections(d1,d2){// Check if the directions are adjacent in the circular directions array\n// Otherwise they are the same or opposite directions\nreturn Math.abs(DIRECTIONS_CW.indexOf(d1)-DIRECTIONS_CW.indexOf(d2))%2===1;}function checkIfCornerPart(snake,partIndex){// If head or tail of the snake, then false\nif(partIndex===0||partIndex===snake.body.length-1)return false;var behind=snake.body[partIndex+1];var current=snake.body[partIndex];// Return false if the behind part has the same position as the current.\n// Relevant for when the snake initially spawns.\nif(behind.x===current.x&&behind.y===current.y)return false;// Check if the directions are adjacent in the circular directions array\n// Otherwise they are the same or opposite directions and should be rendered with a straight part\nreturn areAdjacentDirections(current.direction,behind.direction);}function determineCornerType(snake,partIndex){// If head or tail of the snake, then false\nif(partIndex===0||partIndex===snake.body.length-1)return false;var behind=snake.body[partIndex+1];var current=snake.body[partIndex];return\"\".concat(current.direction,\" \").concat(behind.direction);}function isOverlappedByTail(snake,part){var head=snake.body[snake.body.length-1];return part.isOverlapped&&head.x===part.x&&head.y===part.y;}var Grid=/*#__PURE__*/function(_React$Component){_inherits(Grid,_React$Component);var _super=_createSuper(Grid);function Grid(){_classCallCheck(this,Grid);return _super.apply(this,arguments);}_createClass(Grid,[{key:\"renderPart\",value:function renderPart(snake,snakeIndex,part,partIndex){if(isOverlappedByTail(snake,part))return;switch(part.type){case\"head\":return this.renderHeadPart(snake,snakeIndex,part);case\"tail\":return this.renderTailPart(snake,snakeIndex,part);default:if(checkIfCornerPart(snake,partIndex)){return this.renderCornerPart(snake,snakeIndex,part,partIndex);}else{return this.renderMiddlePart(snake,snakeIndex,part,partIndex);}}}},{key:\"renderHeadPart\",value:function renderHeadPart(snake,snakeIndex,part){var x=getHeadXOffset(part);var y=getHeadYOffset(part);var box=snake.headSvg.viewBox.baseVal;var transform=getHeadTransform(part.direction,box);var viewBoxStr=\"\".concat(box.x,\" \").concat(box.y,\" \").concat(box.width,\" \").concat(box.height);var color=getPartColor(snake,part);var opacity=getPartOpacity(part);return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"svg\",{viewBox:viewBoxStr,x:x,y:y,width:CELL_SIZE,height:CELL_SIZE,fill:color,opacity:opacity,shapeRendering:\"auto\",children:/*#__PURE__*/_jsx(\"g\",{transform:transform,dangerouslySetInnerHTML:{__html:snake.headSvg.innerHTML}})}),snake.effectiveSpace>1&&/*#__PURE__*/ // only add filler if the snake is effectively longer than one tile\n_jsx(\"rect\",{x:getHeadFillerXOffset(part),y:getHeadFillerYOffset(part),width:getFillerWidth(part),height:getFillerHeight(part),fill:color,opacity:opacity,shapeRendering:\"auto\"})]},\"part\"+snakeIndex+\",head\");}},{key:\"renderMiddlePart\",value:function renderMiddlePart(snake,snakeIndex,part,partIndex){var color=getPartColor(snake,part);var opacity=getPartOpacity(part);return/*#__PURE__*/_jsx(\"rect\",{x:getPartXOffset(part),y:getPartYOffset(part),width:getPartWidth(part),height:getPartHeight(part),fill:color,opacity:opacity,shapeRendering:\"auto\"},\"part\".concat(snakeIndex,\",\").concat(part.x,\",\").concat(part.y));}},{key:\"renderCornerPart\",value:function renderCornerPart(snake,snakeIndex,part,partIndex){var viewBox,transform;var path=\"M0,20 h60 a60,60 0 0 1 60,60 v60 h-100 v-20 h-20 z\";var color=getPartColor(snake,part);var opacity=getPartOpacity(part);viewBox=\"0 0 140 140\";var cornerType=determineCornerType(snake,partIndex);switch(cornerType){case\"down left\":case\"right up\":transform=\"rotate(270, 70, 70)\";break;case\"left down\":case\"up right\":transform=\"rotate(90, 70, 70)\";break;case\"left up\":case\"down right\":break;case\"right down\":case\"up left\":transform=\"rotate(180, 70, 70)\";break;default:break;}return/*#__PURE__*/_jsx(\"svg\",{x:getCornerPartXOffset(part,cornerType),y:getCornerPartYOffset(part,cornerType),width:CELL_SIZE+2*CELL_SPACING,height:CELL_SIZE+2*CELL_SPACING,fill:color,opacity:opacity,viewBox:viewBox,shapeRendering:\"auto\",children:/*#__PURE__*/_jsx(\"path\",{d:path,transform:transform})},\"part\".concat(snakeIndex,\",\").concat(part.x,\",\").concat(part.y));}},{key:\"renderTailPart\",value:function renderTailPart(snake,snakeIndex,part){var x=getTailXOffset(part);var y=getTailYOffset(part);var box=snake.tailSvg.viewBox.baseVal;var transform=getTailTransform(part.direction,box);var viewBoxStr=\"\".concat(box.x,\" \").concat(box.y,\" \").concat(box.width,\" \").concat(box.height);var color=getPartColor(snake,part);var opacity=getPartOpacity(part);return/*#__PURE__*/_jsxs(\"g\",{children:[/*#__PURE__*/_jsx(\"svg\",{viewBox:viewBoxStr,x:x,y:y,width:CELL_SIZE,height:CELL_SIZE,fill:color,opacity:opacity,shapeRendering:\"auto\",children:/*#__PURE__*/_jsx(\"g\",{transform:transform,dangerouslySetInnerHTML:{__html:snake.tailSvg.innerHTML}})}),snake.effectiveSpace>1&&/*#__PURE__*/ // only add filler if the snake is effectively longer than one tile\n_jsx(\"rect\",{x:getTailFillerXOffset(part),y:getTailFillerYOffset(part),width:getFillerWidth(part),height:getFillerHeight(part),fill:color,opacity:opacity,shapeRendering:\"auto\"})]},\"part\"+snakeIndex+\",tail\");}},{key:\"renderLabel\",value:function renderLabel(row,col,label){return/*#__PURE__*/_jsx(\"foreignObject\",{x:toGridSpaceX(col),y:toGridSpaceY(row),width:CELL_SIZE,height:CELL_SIZE,children:/*#__PURE__*/_jsx(\"div\",{style:{width:\"100%\",height:\"100%\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\",opacity:0.5},children:/*#__PURE__*/_jsx(\"div\",{style:{fontSize:\"80%\"},children:label})})},\"label\"+row+col);}},{key:\"renderLabels\",value:function renderLabels(){var _this=this;return/*#__PURE__*/_jsxs(_Fragment,{children:[range(this.props.rows).map(function(_,row){return _this.renderLabel(row,-1,row);}),range(this.props.columns).map(function(_,col){return _this.renderLabel(-1,col,col);})]});}},{key:\"renderGrid\",value:function renderGrid(){var _this2=this;// GRID_COLUMNS = this.props.columns;\nGRID_ROWS=this.props.rows;var unsortedSnakes=this.props.snakes||[];var food=this.props.food||[];var hazards=this.props.hazards||[];// Make alive snakes render on top of dead snakes\nvar sortedSnakes=sortAliveSnakesOnTop(unsortedSnakes,this.props.highlightedSnake);if(!this.props.highlightedSnake){// track all of the grid cells that will have a snake part drawn in them.  Successive snake parts\n// drawn in the same cell need to be flagged so they render differently and layer properly\nvar gridCellsWithSnakeParts=Array(this.props.rows);for(var i=0;i<gridCellsWithSnakeParts.length;i++){gridCellsWithSnakeParts[i]=Array(this.props.columns);for(var j=0;j<this.props.columns;j++){gridCellsWithSnakeParts[i][j]=false;}}// Go through each snake, in the order they will be drawn and mark the cells they will occupy.\n// flag parts that would be drawn in cells that are already claimed\nfor(var _i=0;_i<sortedSnakes.length;_i++){var snake=sortedSnakes[_i];if(!snake.isDead){for(var x=0;x<snake.body.length;x++){var part=snake.body[x];if(!isOverlappedByTail(snake,part)){if(gridCellsWithSnakeParts[part.y][part.x]){part.shadeForOverlap=true;}else{gridCellsWithSnakeParts[part.y][part.x]=true;}}}}}}var viewBoxWidth=(CELL_SIZE+CELL_SPACING)*this.props.columns+CELL_SPACING;var viewBoxHeight=(CELL_SIZE+CELL_SPACING)*this.props.rows+CELL_SPACING;var hazardOpacity=parseFloat(colors.hazardOpacity);var overflow=this.props.showCoordinateLabels?\"visible\":\"hidden\";return/*#__PURE__*/_jsxs(\"svg\",{className:\"grid\",width:this.props.maxWidth,height:this.props.maxHeight,x:this.props.x,y:this.props.y,viewBox:\"0 0 \".concat(viewBoxWidth,\" \").concat(viewBoxHeight),overflow:overflow,children:[this.props.showCoordinateLabels&&this.renderLabels(),range(this.props.rows).map(function(_,row){return range(_this2.props.columns).map(function(_,col){return/*#__PURE__*/_jsx(\"rect\",{x:toGridSpaceX(col),y:toGridSpaceY(row),width:CELL_SIZE,height:CELL_SIZE,fill:_this2.props.theme===themes.dark?colors.gridCellBackgroundDark:colors.gridCellBackground,shapeRendering:\"auto\"},\"cell\"+row+\",\"+col);});}),sortedSnakes.map(function(snake,snakeIndex){return/*#__PURE__*/_jsx(\"g\",{className:\"snake\",opacity:getOpacity(snake,_this2.props.highlightedSnake),children:_toConsumableArray(snake.body).reverse().map(function(part,partIndex){return _this2.renderPart(snake,snakeIndex,part,snake.body.length-partIndex-1,_this2.props.highlightedSnake);})},\"snake\".concat(snakeIndex));}),hazards.map(function(o,hazardIndex){return/*#__PURE__*/_jsx(\"rect\",{x:toGridSpaceX(o.x),y:toGridSpaceY(o.y),width:CELL_SIZE,height:CELL_SIZE,fill:colors.hazard,fillOpacity:hazardOpacity,shapeRendering:\"auto\"},\"hazard\"+hazardIndex);}),food.map(function(f,foodIndex){if(_this2.props.foodImage){return/*#__PURE__*/_jsx(\"image\",{x:toGridSpaceX(f.x),y:toGridSpaceY(f.y),width:CELL_SIZE,height:CELL_SIZE,href:_this2.props.foodImage},\"food\"+foodIndex);}else{return/*#__PURE__*/_jsx(\"circle\",{className:\"food\",cx:toGridSpaceX(f.x)+CELL_SIZE/2,cy:toGridSpaceY(f.y)+CELL_SIZE/2,r:FOOD_SIZE,fill:colors.food,shapeRendering:\"optimizeQuality\"},\"food\"+foodIndex);}})]});}},{key:\"render\",value:function render(){if(this.props.snakes){return this.renderGrid();}else{return;}}}]);return Grid;}(React.Component);export default Grid;","map":{"version":3,"sources":["/Users/yabu/CC/board/src/components/grid.jsx"],"names":["React","colors","themes","HIGHLIGHT_DIM","DEAD_OPACITY","OVERLAP_OPACITY","SNAKE_ON_SNAKE_OPACITY","FULL_OPACITY","CELL_SIZE","CELL_SPACING","FOOD_SIZE","toFixed","END_OVERLAP","DIRECTIONS_CW","GRID_ROWS","toGridSpaceX","slot","toGridSpaceY","getPartWidth","part","extraWidth","direction","getPartHeight","extraHeight","getPartXOffset","xBias","x","getPartYOffset","yBias","y","getCornerPartXOffset","type","getCornerPartYOffset","getTailXOffset","getTailYOffset","getHeadXOffset","getHeadYOffset","getHeadFillerXOffset","getHeadFillerYOffset","getTailFillerXOffset","getTailFillerYOffset","getFillerWidth","getFillerHeight","getOpacity","snake","highlightedSnake","isDead","_id","getPartOpacity","shadeForOverlap","isOverlapped","getPartColor","overlapSnake","color","range","size","result","i","push","sortAliveSnakesOnTop","snakes","concat","sort","a","b","aOrder","bOrder","getHeadTransform","viewBox","halfX","width","halfY","height","getTailTransform","areAdjacentDirections","d1","d2","Math","abs","indexOf","checkIfCornerPart","partIndex","body","length","behind","current","determineCornerType","isOverlappedByTail","head","Grid","snakeIndex","renderHeadPart","renderTailPart","renderCornerPart","renderMiddlePart","box","headSvg","baseVal","transform","viewBoxStr","opacity","__html","innerHTML","effectiveSpace","path","cornerType","tailSvg","row","col","label","display","alignItems","justifyContent","fontSize","props","rows","map","_","renderLabel","columns","unsortedSnakes","food","hazards","sortedSnakes","gridCellsWithSnakeParts","Array","j","viewBoxWidth","viewBoxHeight","hazardOpacity","parseFloat","overflow","showCoordinateLabels","maxWidth","maxHeight","renderLabels","theme","dark","gridCellBackgroundDark","gridCellBackground","reverse","renderPart","o","hazardIndex","hazard","f","foodIndex","foodImage","renderGrid","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { colors, themes } from \"../theme\";\n\nconst HIGHLIGHT_DIM = 0.15;\nconst DEAD_OPACITY = 0.1;\nconst OVERLAP_OPACITY = 0.3;\nconst SNAKE_ON_SNAKE_OPACITY = 0.8;\nconst FULL_OPACITY = 1.0;\n\nconst CELL_SIZE = 20;\nconst CELL_SPACING = 4;\nconst FOOD_SIZE = (CELL_SIZE / 3.25).toFixed(2);\nconst END_OVERLAP = 0.1;\n\nconst DIRECTIONS_CW = [\"up\", \"right\", \"down\", \"left\"];\n\n// let GRID_COLUMNS = 0;  Unused for now.\nlet GRID_ROWS = 0;\n\nfunction toGridSpaceX(slot) {\n  return (CELL_SIZE + CELL_SPACING) * slot + CELL_SPACING;\n}\n\nfunction toGridSpaceY(slot) {\n  // Y-Axis in board space is inverted, positive goes up\n  return (CELL_SIZE + CELL_SPACING) * (GRID_ROWS - 1 - slot) + CELL_SPACING;\n}\n\nfunction getPartWidth(part) {\n  const extraWidth =\n    part.direction === \"left\" || part.direction === \"right\"\n      ? 2 * CELL_SPACING\n      : 0;\n  return CELL_SIZE + extraWidth;\n}\n\nfunction getPartHeight(part) {\n  const extraHeight =\n    part.direction === \"up\" || part.direction === \"down\" ? 2 * CELL_SPACING : 0;\n  return CELL_SIZE + extraHeight;\n}\n\nfunction getPartXOffset(part) {\n  const xBias =\n    part.direction === \"left\" || part.direction === \"right\" ? -CELL_SPACING : 0;\n  return toGridSpaceX(part.x) + xBias;\n}\n\nfunction getPartYOffset(part) {\n  const yBias =\n    part.direction === \"up\" || part.direction === \"down\" ? -CELL_SPACING : 0;\n  return toGridSpaceY(part.y) + yBias;\n}\n\nfunction getCornerPartXOffset(part, type) {\n  return toGridSpaceX(part.x) - CELL_SPACING;\n}\n\nfunction getCornerPartYOffset(part, type) {\n  return toGridSpaceY(part.y) - CELL_SPACING;\n}\n\nfunction getTailXOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpaceX(part.x) - END_OVERLAP;\n    case \"right\":\n      return toGridSpaceX(part.x) + END_OVERLAP;\n    default:\n      return toGridSpaceX(part.x);\n  }\n}\n\nfunction getTailYOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpaceY(part.y) - END_OVERLAP;\n    case \"down\":\n      return toGridSpaceY(part.y) + END_OVERLAP;\n    default:\n      return toGridSpaceY(part.y);\n  }\n}\n\nfunction getHeadXOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpaceX(part.x) + END_OVERLAP;\n    case \"right\":\n      return toGridSpaceX(part.x) - END_OVERLAP;\n    default:\n      return toGridSpaceX(part.x);\n  }\n}\n\nfunction getHeadYOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpaceY(part.y) + END_OVERLAP;\n    case \"down\":\n      return toGridSpaceY(part.y) - END_OVERLAP;\n    default:\n      return toGridSpaceY(part.y);\n  }\n}\n\nfunction getHeadFillerXOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpaceX(part.x + 1) - CELL_SPACING - END_OVERLAP;\n    case \"right\":\n      return toGridSpaceX(part.x) - CELL_SPACING - END_OVERLAP;\n    default:\n      return toGridSpaceX(part.x);\n  }\n}\n\nfunction getHeadFillerYOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpaceY(part.y - 1) - CELL_SPACING - END_OVERLAP;\n    case \"down\":\n      return toGridSpaceY(part.y) - CELL_SPACING - END_OVERLAP;\n    default:\n      return toGridSpaceY(part.y);\n  }\n}\n\nfunction getTailFillerXOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"right\":\n      return toGridSpaceX(part.x + 1) - CELL_SPACING - END_OVERLAP;\n    case \"left\":\n      return toGridSpaceX(part.x) - CELL_SPACING - END_OVERLAP;\n    default:\n      return toGridSpaceX(part.x);\n  }\n}\n\nfunction getTailFillerYOffset(part) {\n  // apply slight offset to avoid ugly white line in between parts (works most of the time)\n  switch (part.direction) {\n    case \"down\":\n      return toGridSpaceY(part.y - 1) - CELL_SPACING - END_OVERLAP;\n    case \"up\":\n      return toGridSpaceY(part.y) - CELL_SPACING - END_OVERLAP;\n    default:\n      return toGridSpaceY(part.y);\n  }\n}\n\nfunction getFillerWidth(part) {\n  return part.direction === \"left\" || part.direction === \"right\"\n    ? CELL_SPACING + 2 * END_OVERLAP\n    : CELL_SIZE;\n}\n\nfunction getFillerHeight(part) {\n  return part.direction === \"left\" || part.direction === \"right\"\n    ? CELL_SIZE\n    : CELL_SPACING + 2 * END_OVERLAP;\n}\n\nfunction getOpacity(snake, highlightedSnake) {\n  if (!snake.isDead) {\n    if (highlightedSnake) {\n      return snake._id === highlightedSnake ? 1 : HIGHLIGHT_DIM;\n    }\n  } else {\n    if (highlightedSnake) {\n      return snake._id === highlightedSnake ? 1 : 0;\n    }\n  }\n\n  return snake.isDead ? DEAD_OPACITY : 1;\n}\n\nfunction getPartOpacity(part) {\n  if (part.shadeForOverlap) {\n    return SNAKE_ON_SNAKE_OPACITY;\n  } else if (part.isOverlapped) {\n    return OVERLAP_OPACITY;\n  } else {\n    return FULL_OPACITY;\n  }\n}\n\nfunction getPartColor(snake, part) {\n  if (part.shadeForOverlap) {\n    return colors.overlapSnake;\n  } else {\n    return snake.color;\n  }\n}\n\nfunction range(size) {\n  const result = [];\n  for (let i = 0; i < size; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction sortAliveSnakesOnTop(snakes, highlightedSnake) {\n  return snakes.concat().sort((a, b) => {\n    let aOrder = a.isDead ? 0 : 1;\n    let bOrder = b.isDead ? 0 : 1;\n\n    // always put the highlighted snake up top\n    if (a._id === highlightedSnake) aOrder = 2;\n    if (b._id === highlightedSnake) bOrder = 2;\n\n    return aOrder - bOrder;\n  });\n}\n\nfunction getHeadTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"left\":\n      return `scale(-1,1) translate(-100, 0)`;\n    case \"up\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction getTailTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"right\":\n      return `scale(-1,1) translate(-100,0)`;\n    case \"down\":\n      return `scale(-1,1) translate(-100,0) rotate(-90 ${halfX} ${halfY})`;\n    case \"up\":\n      return `scale(-1,1) translate(-100,0) rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction areAdjacentDirections(d1, d2) {\n  // Check if the directions are adjacent in the circular directions array\n  // Otherwise they are the same or opposite directions\n  return (\n    Math.abs(DIRECTIONS_CW.indexOf(d1) - DIRECTIONS_CW.indexOf(d2)) % 2 === 1\n  );\n}\n\nfunction checkIfCornerPart(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  // Return false if the behind part has the same position as the current.\n  // Relevant for when the snake initially spawns.\n  if (behind.x === current.x && behind.y === current.y) return false;\n\n  // Check if the directions are adjacent in the circular directions array\n  // Otherwise they are the same or opposite directions and should be rendered with a straight part\n  return areAdjacentDirections(current.direction, behind.direction);\n}\n\nfunction determineCornerType(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  return `${current.direction} ${behind.direction}`;\n}\n\nfunction isOverlappedByTail(snake, part) {\n  const head = snake.body[snake.body.length - 1];\n  return part.isOverlapped && head.x === part.x && head.y === part.y;\n}\n\nclass Grid extends React.Component {\n  renderPart(snake, snakeIndex, part, partIndex) {\n    if (isOverlappedByTail(snake, part)) return;\n    switch (part.type) {\n      case \"head\":\n        return this.renderHeadPart(snake, snakeIndex, part);\n      case \"tail\":\n        return this.renderTailPart(snake, snakeIndex, part);\n      default:\n        if (checkIfCornerPart(snake, partIndex)) {\n          return this.renderCornerPart(snake, snakeIndex, part, partIndex);\n        } else {\n          return this.renderMiddlePart(snake, snakeIndex, part, partIndex);\n        }\n    }\n  }\n\n  renderHeadPart(snake, snakeIndex, part) {\n    const x = getHeadXOffset(part);\n    const y = getHeadYOffset(part);\n    const box = snake.headSvg.viewBox.baseVal;\n    const transform = getHeadTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n    let color = getPartColor(snake, part);\n    let opacity = getPartOpacity(part);\n\n    return (\n      <g key={\"part\" + snakeIndex + \",head\"}>\n        <svg\n          viewBox={viewBoxStr}\n          x={x}\n          y={y}\n          width={CELL_SIZE}\n          height={CELL_SIZE}\n          fill={color}\n          opacity={opacity}\n          shapeRendering=\"auto\"\n        >\n          <g\n            transform={transform}\n            dangerouslySetInnerHTML={{ __html: snake.headSvg.innerHTML }}\n          />\n        </svg>\n        {snake.effectiveSpace > 1 && (\n          // only add filler if the snake is effectively longer than one tile\n          <rect\n            x={getHeadFillerXOffset(part)}\n            y={getHeadFillerYOffset(part)}\n            width={getFillerWidth(part)}\n            height={getFillerHeight(part)}\n            fill={color}\n            opacity={opacity}\n            shapeRendering=\"auto\"\n          />\n        )}\n      </g>\n    );\n  }\n\n  renderMiddlePart(snake, snakeIndex, part, partIndex) {\n    let color = getPartColor(snake, part);\n    let opacity = getPartOpacity(part);\n\n    return (\n      <rect\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        fill={color}\n        opacity={opacity}\n        shapeRendering=\"auto\"\n      />\n    );\n  }\n\n  renderCornerPart(snake, snakeIndex, part, partIndex) {\n    let viewBox, transform;\n    let path = \"M0,20 h60 a60,60 0 0 1 60,60 v60 h-100 v-20 h-20 z\";\n    let color = getPartColor(snake, part);\n    let opacity = getPartOpacity(part);\n\n    viewBox = \"0 0 140 140\";\n\n    const cornerType = determineCornerType(snake, partIndex);\n    switch (cornerType) {\n      case \"down left\":\n      case \"right up\":\n        transform = \"rotate(270, 70, 70)\";\n        break;\n      case \"left down\":\n      case \"up right\":\n        transform = \"rotate(90, 70, 70)\";\n        break;\n      case \"left up\":\n      case \"down right\":\n        break;\n      case \"right down\":\n      case \"up left\":\n        transform = \"rotate(180, 70, 70)\";\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <svg\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getCornerPartXOffset(part, cornerType)}\n        y={getCornerPartYOffset(part, cornerType)}\n        width={CELL_SIZE + 2 * CELL_SPACING}\n        height={CELL_SIZE + 2 * CELL_SPACING}\n        fill={color}\n        opacity={opacity}\n        viewBox={viewBox}\n        shapeRendering=\"auto\"\n      >\n        <path d={path} transform={transform} />\n      </svg>\n    );\n  }\n\n  renderTailPart(snake, snakeIndex, part) {\n    const x = getTailXOffset(part);\n    const y = getTailYOffset(part);\n    const box = snake.tailSvg.viewBox.baseVal;\n    const transform = getTailTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n    let color = getPartColor(snake, part);\n    let opacity = getPartOpacity(part);\n\n    return (\n      <g key={\"part\" + snakeIndex + \",tail\"}>\n        <svg\n          viewBox={viewBoxStr}\n          x={x}\n          y={y}\n          width={CELL_SIZE}\n          height={CELL_SIZE}\n          fill={color}\n          opacity={opacity}\n          shapeRendering=\"auto\"\n        >\n          <g\n            transform={transform}\n            dangerouslySetInnerHTML={{ __html: snake.tailSvg.innerHTML }}\n          />\n        </svg>\n        {snake.effectiveSpace > 1 && (\n          // only add filler if the snake is effectively longer than one tile\n          <rect\n            x={getTailFillerXOffset(part)}\n            y={getTailFillerYOffset(part)}\n            width={getFillerWidth(part)}\n            height={getFillerHeight(part)}\n            fill={color}\n            opacity={opacity}\n            shapeRendering=\"auto\"\n          />\n        )}\n      </g>\n    );\n  }\n\n  renderLabel(row, col, label) {\n    return (\n      <foreignObject\n        key={\"label\" + row + col}\n        x={toGridSpaceX(col)}\n        y={toGridSpaceY(row)}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n      >\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            opacity: 0.5\n          }}\n        >\n          <div style={{ fontSize: \"80%\" }}>{label}</div>\n        </div>\n      </foreignObject>\n    );\n  }\n\n  renderLabels() {\n    return (\n      <>\n        {range(this.props.rows).map((_, row) => this.renderLabel(row, -1, row))}\n\n        {range(this.props.columns).map((_, col) =>\n          this.renderLabel(-1, col, col)\n        )}\n      </>\n    );\n  }\n\n  renderGrid() {\n    // GRID_COLUMNS = this.props.columns;\n    GRID_ROWS = this.props.rows;\n\n    const unsortedSnakes = this.props.snakes || [];\n    const food = this.props.food || [];\n    const hazards = this.props.hazards || [];\n\n    // Make alive snakes render on top of dead snakes\n    const sortedSnakes = sortAliveSnakesOnTop(\n      unsortedSnakes,\n      this.props.highlightedSnake\n    );\n\n    if (!this.props.highlightedSnake) {\n      // track all of the grid cells that will have a snake part drawn in them.  Successive snake parts\n      // drawn in the same cell need to be flagged so they render differently and layer properly\n      let gridCellsWithSnakeParts = Array(this.props.rows);\n      for (let i = 0; i < gridCellsWithSnakeParts.length; i++) {\n        gridCellsWithSnakeParts[i] = Array(this.props.columns);\n        for (let j = 0; j < this.props.columns; j++) {\n          gridCellsWithSnakeParts[i][j] = false;\n        }\n      }\n\n      // Go through each snake, in the order they will be drawn and mark the cells they will occupy.\n      // flag parts that would be drawn in cells that are already claimed\n      for (let i = 0; i < sortedSnakes.length; i++) {\n        let snake = sortedSnakes[i];\n        if (!snake.isDead) {\n          for (let x = 0; x < snake.body.length; x++) {\n            let part = snake.body[x];\n            if (!isOverlappedByTail(snake, part)) {\n              if (gridCellsWithSnakeParts[part.y][part.x]) {\n                part.shadeForOverlap = true;\n              } else {\n                gridCellsWithSnakeParts[part.y][part.x] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    const viewBoxWidth =\n      (CELL_SIZE + CELL_SPACING) * this.props.columns + CELL_SPACING;\n    const viewBoxHeight =\n      (CELL_SIZE + CELL_SPACING) * this.props.rows + CELL_SPACING;\n\n    const hazardOpacity = parseFloat(colors.hazardOpacity);\n\n    const overflow = this.props.showCoordinateLabels ? \"visible\" : \"hidden\";\n\n    return (\n      <svg\n        className=\"grid\"\n        width={this.props.maxWidth}\n        height={this.props.maxHeight}\n        x={this.props.x}\n        y={this.props.y}\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n        overflow={overflow}\n      >\n        {this.props.showCoordinateLabels && this.renderLabels()}\n        {range(this.props.rows).map((_, row) =>\n          range(this.props.columns).map((_, col) => (\n            <rect\n              key={\"cell\" + row + \",\" + col}\n              x={toGridSpaceX(col)}\n              y={toGridSpaceY(row)}\n              width={CELL_SIZE}\n              height={CELL_SIZE}\n              fill={\n                this.props.theme === themes.dark\n                  ? colors.gridCellBackgroundDark\n                  : colors.gridCellBackground\n              }\n              shapeRendering=\"auto\"\n            />\n          ))\n        )}\n        {sortedSnakes.map((snake, snakeIndex) => {\n          return (\n            <g\n              key={`snake${snakeIndex}`}\n              className=\"snake\"\n              opacity={getOpacity(snake, this.props.highlightedSnake)}\n            >\n              {[...snake.body]\n                .reverse()\n                .map((part, partIndex) =>\n                  this.renderPart(\n                    snake,\n                    snakeIndex,\n                    part,\n                    snake.body.length - partIndex - 1,\n                    this.props.highlightedSnake\n                  )\n                )}\n            </g>\n          );\n        })}\n        {hazards.map((o, hazardIndex) => (\n          <rect\n            key={\"hazard\" + hazardIndex}\n            x={toGridSpaceX(o.x)}\n            y={toGridSpaceY(o.y)}\n            width={CELL_SIZE}\n            height={CELL_SIZE}\n            fill={colors.hazard}\n            fillOpacity={hazardOpacity}\n            shapeRendering=\"auto\"\n          />\n        ))}\n        {food.map((f, foodIndex) => {\n          if (this.props.foodImage) {\n            return (\n              <image\n                key={\"food\" + foodIndex}\n                x={toGridSpaceX(f.x)}\n                y={toGridSpaceY(f.y)}\n                width={CELL_SIZE}\n                height={CELL_SIZE}\n                href={this.props.foodImage}\n              />\n            );\n          } else {\n            return (\n              <circle\n                key={\"food\" + foodIndex}\n                className=\"food\"\n                cx={toGridSpaceX(f.x) + CELL_SIZE / 2}\n                cy={toGridSpaceY(f.y) + CELL_SIZE / 2}\n                r={FOOD_SIZE}\n                fill={colors.food}\n                shapeRendering=\"optimizeQuality\"\n              />\n            );\n          }\n        })}\n      </svg>\n    );\n  }\n\n  render() {\n    if (this.props.snakes) {\n      return this.renderGrid();\n    } else {\n      return;\n    }\n  }\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}