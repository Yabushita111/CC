{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/y-yabust/CC/cc-replay/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/home/y-yabust/CC/cc-replay/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/y-yabust/CC/cc-replay/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{streamAll}from\"../io/websocket\";import{makeQueryString,httpToWsProtocol,join}from\"./url\";import{loadSvgs,getSvg,svgExists}from\"./inline-svg\";var DEFAULT_SNAKE_HEAD=\"default\";var DEFAULT_SNAKE_TAIL=\"default\";var APP_VERSION=process.env.REACT_APP_VERSION;function get(_x,_x2){return _get.apply(this,arguments);}function _get(){_get=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url,query){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"output game config\");_context.next=3;return fetch(url+makeQueryString(query));case 3:response=_context.sent;console.log(response);if(!(response.status===200)){_context.next=9;break;}return _context.abrupt(\"return\",Promise.resolve(response.json()));case 9:return _context.abrupt(\"return\",Promise.resolve(response.json()).then(function(responseJson){console.error(responseJson.error);return Promise.reject(responseJson.error);}));case 10:case\"end\":return _context.stop();}}},_callee);}));return _get.apply(this,arguments);}export function delay(millis){return new Promise(function(resolve){return setTimeout(resolve,millis);});}export function getReadableCauseOfDeath(death){// See https://github.com/BattlesnakeOfficial/rules/blob/master/standard.go\nswitch(death.cause){case\"snake-collision\":return\"Ran into \".concat(death.eliminatedBy,\"'s body\");case\"snake-self-collision\":return\"Collided with itself\";case\"out-of-health\":return\"Out of health\";case\"hazard\":return\"Eliminated by hazard\";case\"head-collision\":return\"Lost head-to-head with \".concat(death.eliminatedBy);case\"wall-collision\":return\"Moved out of bounds\";case\"squad-eliminated\":return\"Squad was eliminated\";default:return death.cause;}}// Gets a list of all unique SVG paths required by the snakes.\nfunction getAllSvgs(snakes){var all=snakes.reduce(function(result,snake){return result.concat([snake.HeadType,snake.TailType]);},[]);var unique=new Set(all);return Array.from(unique);}function assignHeadAndTailUrls(_x3){return _assignHeadAndTailUrls.apply(this,arguments);}function _assignHeadAndTailUrls(){_assignHeadAndTailUrls=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(snakes){var _iterator,_step,snake;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_iterator=_createForOfIteratorHelper(snakes);_context2.prev=1;_iterator.s();case 3:if((_step=_iterator.n()).done){_context2.next=19;break;}snake=_step.value;// Assign default if missing\nif(!snake.HeadType){snake.HeadType=DEFAULT_SNAKE_HEAD;}if(!snake.TailType){snake.TailType=DEFAULT_SNAKE_TAIL;}// Format as actual URL if it's just a name\nsnake.HeadType=getSnakeHeadSvgUrl(snake.HeadType);snake.TailType=getSnakeTailSvgUrl(snake.TailType);_context2.next=11;return svgExists(snake.HeadType);case 11:if(_context2.sent){_context2.next=13;break;}snake.HeadType=getSnakeHeadSvgUrl(DEFAULT_SNAKE_HEAD);case 13:_context2.next=15;return svgExists(snake.TailType);case 15:if(_context2.sent){_context2.next=17;break;}snake.TailType=getSnakeTailSvgUrl(DEFAULT_SNAKE_TAIL);case 17:_context2.next=3;break;case 19:_context2.next=24;break;case 21:_context2.prev=21;_context2.t0=_context2[\"catch\"](1);_iterator.e(_context2.t0);case 24:_context2.prev=24;_iterator.f();return _context2.finish(24);case 27:case\"end\":return _context2.stop();}}},_callee2,null,[[1,21,24,27]]);}));return _assignHeadAndTailUrls.apply(this,arguments);}function setHeadAndTailSvgs(_x4){return _setHeadAndTailSvgs.apply(this,arguments);}function _setHeadAndTailSvgs(){_setHeadAndTailSvgs=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(snakes){var _iterator2,_step2,snake;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return assignHeadAndTailUrls(snakes);case 2:_context3.next=4;return loadSvgs(getAllSvgs(snakes));case 4:_iterator2=_createForOfIteratorHelper(snakes);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){snake=_step2.value;snake.HeadSvg=getSvg(snake.HeadType);snake.TailSvg=getSvg(snake.TailType);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}case 6:case\"end\":return _context3.stop();}}},_callee3);}));return _setHeadAndTailSvgs.apply(this,arguments);}function isIllegalSvgPath(nameOrPath){return nameOrPath.indexOf(\"/\")>=0||nameOrPath.indexOf(\".\")>=0;}function svgUrlFromName(base,relative){//appending the git hash of this version allows for cache busting on deploy\nvar extension=\".svg?board_version=\"+APP_VERSION;return join(\"https://media.battlesnake.com\",base,relative)+extension;}function getSnakeHeadSvgUrl(path){var effectivePath=isIllegalSvgPath(path)?DEFAULT_SNAKE_HEAD:path;return svgUrlFromName(\"/snakes/heads\",effectivePath);}function getSnakeTailSvgUrl(path){var effectivePath=isIllegalSvgPath(path)?DEFAULT_SNAKE_TAIL:path;return svgUrlFromName(\"/snakes/tails\",effectivePath);}function prepareFrame(_x5){return _prepareFrame.apply(this,arguments);}function _prepareFrame(){_prepareFrame=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(frame){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return setHeadAndTailSvgs(frame.Snakes);case 2:case\"end\":return _context4.stop();}}},_callee4);}));return _prepareFrame.apply(this,arguments);}export function fetchGameInfo(baseUrl,gameId){var url=join(baseUrl,\"games/\".concat(gameId));console.log(\"output:\");console.log(url);return get(url);}export function streamAllEvents(_x6,_x7,_x8){return _streamAllEvents.apply(this,arguments);}function _streamAllEvents(){_streamAllEvents=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(baseUrl,gameId,receiveEvent){var href,game,chain,onEngineEvent,wsUrl;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:onEngineEvent=function _onEngineEvent(engineEvent){if(engineEvent.Type){var eventData=engineEvent.Data||engineEvent;//output eventdata\nconsole.log(eventData);chain=chain.then(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(!(engineEvent.Type===\"frame\")){_context5.next=3;break;}_context5.next=3;return prepareFrame(eventData);case 3:return _context5.abrupt(\"return\",receiveEvent(game,engineEvent.Type,eventData));case 4:case\"end\":return _context5.stop();}}},_callee5);})));}return engineEvent.Type&&engineEvent.Type===\"game_end\";};href=window.location.href;baseUrl=href.substr(0,href.lastIndexOf(\"/\")+1);_context6.next=5;return fetchGameInfo(baseUrl,gameId);case 5:game=_context6.sent;chain=Promise.resolve();wsUrl=join(httpToWsProtocol(baseUrl),\"games/\".concat(gameId,\"/events\"));console.log(\"output wsurl\");console.log(wsUrl);_context6.next=12;return streamAll(wsUrl,onEngineEvent);case 12:_context6.next=14;return chain;case 14:case\"end\":return _context6.stop();}}},_callee6);}));return _streamAllEvents.apply(this,arguments);}export function getFrameByTurn(frames,turn){return frames.filter(function(frame){return frame.turn===turn;})[0];}","map":{"version":3,"sources":["/home/y-yabust/CC/cc-replay/src/utils/engine-client.js"],"names":["streamAll","makeQueryString","httpToWsProtocol","join","loadSvgs","getSvg","svgExists","DEFAULT_SNAKE_HEAD","DEFAULT_SNAKE_TAIL","APP_VERSION","process","env","REACT_APP_VERSION","get","url","query","console","log","fetch","response","status","Promise","resolve","json","then","responseJson","error","reject","delay","millis","setTimeout","getReadableCauseOfDeath","death","cause","eliminatedBy","getAllSvgs","snakes","all","reduce","result","snake","concat","HeadType","TailType","unique","Set","Array","from","assignHeadAndTailUrls","getSnakeHeadSvgUrl","getSnakeTailSvgUrl","setHeadAndTailSvgs","HeadSvg","TailSvg","isIllegalSvgPath","nameOrPath","indexOf","svgUrlFromName","base","relative","extension","path","effectivePath","prepareFrame","frame","Snakes","fetchGameInfo","baseUrl","gameId","streamAllEvents","receiveEvent","onEngineEvent","engineEvent","Type","eventData","Data","chain","game","href","window","location","substr","lastIndexOf","wsUrl","getFrameByTurn","frames","turn","filter"],"mappings":"+VAAA,OAASA,SAAT,KAA0B,iBAA1B,CACA,OAASC,eAAT,CAA0BC,gBAA1B,CAA4CC,IAA5C,KAAwD,OAAxD,CACA,OAASC,QAAT,CAAmBC,MAAnB,CAA2BC,SAA3B,KAA4C,cAA5C,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,SAA3B,CACA,GAAMC,CAAAA,kBAAkB,CAAG,SAA3B,CACA,GAAMC,CAAAA,WAAW,CAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAhC,C,QAEeC,CAAAA,G,yHAAf,iBAAmBC,GAAnB,CAAwBC,KAAxB,+HACEC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADF,sBAEyBC,CAAAA,KAAK,CAACJ,GAAG,CAAGb,eAAe,CAACc,KAAD,CAAtB,CAF9B,QAEQI,QAFR,eAGEH,OAAO,CAACC,GAAR,CAAYE,QAAZ,EAHF,KAIMA,QAAQ,CAACC,MAAT,GAAoB,GAJ1B,0DAKWC,OAAO,CAACC,OAAR,CAAgBH,QAAQ,CAACI,IAAT,EAAhB,CALX,yCAOWF,OAAO,CAACC,OAAR,CAAgBH,QAAQ,CAACI,IAAT,EAAhB,EAAiCC,IAAjC,CAAsC,SAAAC,YAAY,CAAI,CAC3DT,OAAO,CAACU,KAAR,CAAcD,YAAY,CAACC,KAA3B,EACA,MAAOL,CAAAA,OAAO,CAACM,MAAR,CAAeF,YAAY,CAACC,KAA5B,CAAP,CACD,CAHM,CAPX,yD,sCAcA,MAAO,SAASE,CAAAA,KAAT,CAAeC,MAAf,CAAuB,CAC5B,MAAO,IAAIR,CAAAA,OAAJ,CAAY,SAAAC,OAAO,QAAIQ,CAAAA,UAAU,CAACR,OAAD,CAAUO,MAAV,CAAd,EAAnB,CAAP,CACD,CAED,MAAO,SAASE,CAAAA,uBAAT,CAAiCC,KAAjC,CAAwC,CAC7C;AACA,OAAQA,KAAK,CAACC,KAAd,EACE,IAAK,iBAAL,CACE,yBAAmBD,KAAK,CAACE,YAAzB,YACF,IAAK,sBAAL,CACE,MAAO,sBAAP,CACF,IAAK,eAAL,CACE,MAAO,eAAP,CACF,IAAK,QAAL,CACE,MAAO,sBAAP,CACF,IAAK,gBAAL,CACE,uCAAiCF,KAAK,CAACE,YAAvC,EACF,IAAK,gBAAL,CACE,MAAO,qBAAP,CACF,IAAK,kBAAL,CACE,MAAO,sBAAP,CACF,QACE,MAAOF,CAAAA,KAAK,CAACC,KAAb,CAhBJ,CAkBD,CAED;AACA,QAASE,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CAC1B,GAAMC,CAAAA,GAAG,CAAGD,MAAM,CAACE,MAAP,CAAc,SAACC,MAAD,CAASC,KAAT,CAAmB,CAC3C,MAAOD,CAAAA,MAAM,CAACE,MAAP,CAAc,CAACD,KAAK,CAACE,QAAP,CAAiBF,KAAK,CAACG,QAAvB,CAAd,CAAP,CACD,CAFW,CAET,EAFS,CAAZ,CAGA,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,GAAJ,CAAQR,GAAR,CAAf,CACA,MAAOS,CAAAA,KAAK,CAACC,IAAN,CAAWH,MAAX,CAAP,CACD,C,QAEcI,CAAAA,qB,4KAAf,kBAAqCZ,MAArC,qLACsBA,MADtB,gGACaI,KADb,aAEI;AACA,GAAI,CAACA,KAAK,CAACE,QAAX,CAAqB,CACnBF,KAAK,CAACE,QAAN,CAAiBnC,kBAAjB,CACD,CACD,GAAI,CAACiC,KAAK,CAACG,QAAX,CAAqB,CACnBH,KAAK,CAACG,QAAN,CAAiBnC,kBAAjB,CACD,CAED;AACAgC,KAAK,CAACE,QAAN,CAAiBO,kBAAkB,CAACT,KAAK,CAACE,QAAP,CAAnC,CACAF,KAAK,CAACG,QAAN,CAAiBO,kBAAkB,CAACV,KAAK,CAACG,QAAP,CAAnC,CAZJ,wBAcgBrC,CAAAA,SAAS,CAACkC,KAAK,CAACE,QAAP,CAdzB,qDAeMF,KAAK,CAACE,QAAN,CAAiBO,kBAAkB,CAAC1C,kBAAD,CAAnC,CAfN,gCAiBgBD,CAAAA,SAAS,CAACkC,KAAK,CAACG,QAAP,CAjBzB,qDAkBMH,KAAK,CAACG,QAAN,CAAiBO,kBAAkB,CAAC1C,kBAAD,CAAnC,CAlBN,uS,gEAuBe2C,CAAAA,kB,mKAAf,kBAAkCf,MAAlC,yKACQY,CAAAA,qBAAqB,CAACZ,MAAD,CAD7B,+BAEQhC,CAAAA,QAAQ,CAAC+B,UAAU,CAACC,MAAD,CAAX,CAFhB,8CAIsBA,MAJtB,MAIE,kDAA4B,CAAjBI,KAAiB,cAC1BA,KAAK,CAACY,OAAN,CAAgB/C,MAAM,CAACmC,KAAK,CAACE,QAAP,CAAtB,CACAF,KAAK,CAACa,OAAN,CAAgBhD,MAAM,CAACmC,KAAK,CAACG,QAAP,CAAtB,CACD,CAPH,+G,qDAUA,QAASW,CAAAA,gBAAT,CAA0BC,UAA1B,CAAsC,CACpC,MAAOA,CAAAA,UAAU,CAACC,OAAX,CAAmB,GAAnB,GAA2B,CAA3B,EAAgCD,UAAU,CAACC,OAAX,CAAmB,GAAnB,GAA2B,CAAlE,CACD,CAED,QAASC,CAAAA,cAAT,CAAwBC,IAAxB,CAA8BC,QAA9B,CAAwC,CACtC;AACA,GAAMC,CAAAA,SAAS,CAAG,sBAAwBnD,WAA1C,CACA,MAAON,CAAAA,IAAI,CAAC,+BAAD,CAAkCuD,IAAlC,CAAwCC,QAAxC,CAAJ,CAAwDC,SAA/D,CACD,CAED,QAASX,CAAAA,kBAAT,CAA4BY,IAA5B,CAAkC,CAChC,GAAMC,CAAAA,aAAa,CAAGR,gBAAgB,CAACO,IAAD,CAAhB,CAAyBtD,kBAAzB,CAA8CsD,IAApE,CACA,MAAOJ,CAAAA,cAAc,CAAC,eAAD,CAAkBK,aAAlB,CAArB,CACD,CAED,QAASZ,CAAAA,kBAAT,CAA4BW,IAA5B,CAAkC,CAChC,GAAMC,CAAAA,aAAa,CAAGR,gBAAgB,CAACO,IAAD,CAAhB,CAAyBrD,kBAAzB,CAA8CqD,IAApE,CACA,MAAOJ,CAAAA,cAAc,CAAC,eAAD,CAAkBK,aAAlB,CAArB,CACD,C,QAEcC,CAAAA,Y,iJAAf,kBAA4BC,KAA5B,6IACQb,CAAAA,kBAAkB,CAACa,KAAK,CAACC,MAAP,CAD1B,yD,+CAIA,MAAO,SAASC,CAAAA,aAAT,CAAuBC,OAAvB,CAAgCC,MAAhC,CAAwC,CAC7C,GAAMtD,CAAAA,GAAG,CAAGX,IAAI,CAACgE,OAAD,iBAAmBC,MAAnB,EAAhB,CACApD,OAAO,CAACC,GAAR,CAAY,SAAZ,EACAD,OAAO,CAACC,GAAR,CAAYH,GAAZ,EACA,MAAOD,CAAAA,GAAG,CAACC,GAAD,CAAV,CACD,CAED,eAAsBuD,CAAAA,eAAtB,6D,qGAAO,kBAA+BF,OAA/B,CAAwCC,MAAxC,CAAgDE,YAAhD,sBAKIC,aALJ,2HAKIA,aALJ,yBAKkBC,WALlB,CAK+B,CAClC,GAAIA,WAAW,CAACC,IAAhB,CAAsB,CACpB,GAAMC,CAAAA,SAAS,CAAGF,WAAW,CAACG,IAAZ,EAAoBH,WAAtC,CACA;AACAxD,OAAO,CAACC,GAAR,CAAYyD,SAAZ,EACAE,KAAK,CAAGA,KAAK,CAACpD,IAAN,sEAAW,6IACbgD,WAAW,CAACC,IAAZ,GAAqB,OADR,kDAETV,CAAAA,YAAY,CAACW,SAAD,CAFH,yCAIVJ,YAAY,CAACO,IAAD,CAAOL,WAAW,CAACC,IAAnB,CAAyBC,SAAzB,CAJF,0DAAX,GAAR,CAMD,CACD,MAAOF,CAAAA,WAAW,CAACC,IAAZ,EAAoBD,WAAW,CAACC,IAAZ,GAAqB,UAAhD,CACD,CAlBI,CACCK,IADD,CACQC,MAAM,CAACC,QAAP,CAAgBF,IADxB,CAELX,OAAO,CAAGW,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAeH,IAAI,CAACI,WAAL,CAAiB,GAAjB,EAAwB,CAAvC,CAAV,CAFK,uBAGchB,CAAAA,aAAa,CAACC,OAAD,CAAUC,MAAV,CAH3B,QAGCS,IAHD,gBAIDD,KAJC,CAIOvD,OAAO,CAACC,OAAR,EAJP,CAoBC6D,KApBD,CAoBShF,IAAI,CAACD,gBAAgB,CAACiE,OAAD,CAAjB,iBAAqCC,MAArC,YApBb,CAqBLpD,OAAO,CAACC,GAAR,CAAY,cAAZ,EACAD,OAAO,CAACC,GAAR,CAAYkE,KAAZ,EAtBK,wBAuBCnF,CAAAA,SAAS,CAACmF,KAAD,CAAQZ,aAAR,CAvBV,iCAwBCK,CAAAA,KAxBD,0D,kDA0BP,MAAO,SAASQ,CAAAA,cAAT,CAAwBC,MAAxB,CAAgCC,IAAhC,CAAsC,CAC3C,MAAOD,CAAAA,MAAM,CAACE,MAAP,CAAc,SAAAvB,KAAK,QAAIA,CAAAA,KAAK,CAACsB,IAAN,GAAeA,IAAnB,EAAnB,EAA4C,CAA5C,CAAP,CACD","sourcesContent":["import { streamAll } from \"../io/websocket\";\nimport { makeQueryString, httpToWsProtocol, join } from \"./url\";\nimport { loadSvgs, getSvg, svgExists } from \"./inline-svg\";\n\nconst DEFAULT_SNAKE_HEAD = \"default\";\nconst DEFAULT_SNAKE_TAIL = \"default\";\nconst APP_VERSION = process.env.REACT_APP_VERSION;\n\nasync function get(url, query) {\n  console.log(\"output game config\");\n  const response = await fetch(url + makeQueryString(query));\n  console.log(response);\n  if (response.status === 200) {\n    return Promise.resolve(response.json());\n  } else {\n    return Promise.resolve(response.json()).then(responseJson => {\n      console.error(responseJson.error);\n      return Promise.reject(responseJson.error);\n    });\n  }\n}\n\nexport function delay(millis) {\n  return new Promise(resolve => setTimeout(resolve, millis));\n}\n\nexport function getReadableCauseOfDeath(death) {\n  // See https://github.com/BattlesnakeOfficial/rules/blob/master/standard.go\n  switch (death.cause) {\n    case \"snake-collision\":\n      return `Ran into ${death.eliminatedBy}'s body`;\n    case \"snake-self-collision\":\n      return \"Collided with itself\";\n    case \"out-of-health\":\n      return \"Out of health\";\n    case \"hazard\":\n      return \"Eliminated by hazard\";\n    case \"head-collision\":\n      return `Lost head-to-head with ${death.eliminatedBy}`;\n    case \"wall-collision\":\n      return \"Moved out of bounds\";\n    case \"squad-eliminated\":\n      return \"Squad was eliminated\";\n    default:\n      return death.cause;\n  }\n}\n\n// Gets a list of all unique SVG paths required by the snakes.\nfunction getAllSvgs(snakes) {\n  const all = snakes.reduce((result, snake) => {\n    return result.concat([snake.HeadType, snake.TailType]);\n  }, []);\n  const unique = new Set(all);\n  return Array.from(unique);\n}\n\nasync function assignHeadAndTailUrls(snakes) {\n  for (const snake of snakes) {\n    // Assign default if missing\n    if (!snake.HeadType) {\n      snake.HeadType = DEFAULT_SNAKE_HEAD;\n    }\n    if (!snake.TailType) {\n      snake.TailType = DEFAULT_SNAKE_TAIL;\n    }\n\n    // Format as actual URL if it's just a name\n    snake.HeadType = getSnakeHeadSvgUrl(snake.HeadType);\n    snake.TailType = getSnakeTailSvgUrl(snake.TailType);\n\n    if (!(await svgExists(snake.HeadType))) {\n      snake.HeadType = getSnakeHeadSvgUrl(DEFAULT_SNAKE_HEAD);\n    }\n    if (!(await svgExists(snake.TailType))) {\n      snake.TailType = getSnakeTailSvgUrl(DEFAULT_SNAKE_TAIL);\n    }\n  }\n}\n\nasync function setHeadAndTailSvgs(snakes) {\n  await assignHeadAndTailUrls(snakes);\n  await loadSvgs(getAllSvgs(snakes));\n\n  for (const snake of snakes) {\n    snake.HeadSvg = getSvg(snake.HeadType);\n    snake.TailSvg = getSvg(snake.TailType);\n  }\n}\n\nfunction isIllegalSvgPath(nameOrPath) {\n  return nameOrPath.indexOf(\"/\") >= 0 || nameOrPath.indexOf(\".\") >= 0;\n}\n\nfunction svgUrlFromName(base, relative) {\n  //appending the git hash of this version allows for cache busting on deploy\n  const extension = \".svg?board_version=\" + APP_VERSION;\n  return join(\"https://media.battlesnake.com\", base, relative) + extension;\n}\n\nfunction getSnakeHeadSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_HEAD : path;\n  return svgUrlFromName(\"/snakes/heads\", effectivePath);\n}\n\nfunction getSnakeTailSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_TAIL : path;\n  return svgUrlFromName(\"/snakes/tails\", effectivePath);\n}\n\nasync function prepareFrame(frame) {\n  await setHeadAndTailSvgs(frame.Snakes);\n}\n\nexport function fetchGameInfo(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}`);\n  console.log(\"output:\");\n  console.log(url);\n  return get(url);\n}\n\nexport async function streamAllEvents(baseUrl, gameId, receiveEvent) {\n  const href = window.location.href;\n  baseUrl = href.substr(0, href.lastIndexOf(\"/\") + 1);\n  const game = await fetchGameInfo(baseUrl, gameId);\n  let chain = Promise.resolve();\n  function onEngineEvent(engineEvent) {\n    if (engineEvent.Type) {\n      const eventData = engineEvent.Data || engineEvent;\n      //output eventdata\n      console.log(eventData);\n      chain = chain.then(async () => {\n        if (engineEvent.Type === \"frame\") {\n          await prepareFrame(eventData);\n        }\n        return receiveEvent(game, engineEvent.Type, eventData);\n      });\n    }\n    return engineEvent.Type && engineEvent.Type === \"game_end\";\n  }\n\n  const wsUrl = join(httpToWsProtocol(baseUrl), `games/${gameId}/events`);\n  console.log(\"output wsurl\");\n  console.log(wsUrl);\n  await streamAll(wsUrl, onEngineEvent);\n  await chain;\n}\nexport function getFrameByTurn(frames, turn) {\n  return frames.filter(frame => frame.turn === turn)[0];\n}\n"]},"metadata":{},"sourceType":"module"}