{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getLocalSetting, setLocalSetting } from \"../../app/storage\";\nimport { initialSettings as initialState } from \"./defaults\";\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    frameRateUpdated(state, action) {\n      state.frameRate = action.payload;\n    },\n\n    themeSelected(state, action) {\n      state.theme = action.payload;\n    },\n\n    autoPlayUpdated(state, action) {\n      state.autoplay = action.payload;\n    },\n\n    showFrameScrubberUpdated(state, action) {\n      state.showFrameScrubber = action.payload;\n    },\n\n    showCoordinateLabelsUpdated(state, action) {\n      state.showCoordinateLabels = action.payload;\n    }\n\n  }\n}); // toolkit generates the actions for us\n\nexport const {\n  frameRateUpdated,\n  themeSelected,\n  autoPlayUpdated,\n  showFrameScrubberUpdated,\n  showCoordinateLabelsUpdated\n} = settingsSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const currentFrameRate = state => state.settings.frameRate;\nexport const currentTheme = state => state.settings.theme;\nexport const currentAutoplay = state => state.settings.autoplay;\nexport const currentShowFrameScrubber = state => state.settings.showFrameScrubber;\nexport const currentShowCoordinateLabels = state => state.settings.showCoordinateLabels;\nexport function settingsStoreListener(state) {\n  if (state.settings.frameRate !== getLocalSetting(\"frameRate\")) {\n    setLocalSetting(\"frameRate\", state.settings.frameRate);\n  }\n\n  if (state.settings.theme !== getLocalSetting(\"theme\")) {\n    setLocalSetting(\"theme\", state.settings.theme);\n  }\n\n  if (state.settings.autoplay !== getLocalSetting(\"autoplay\")) {\n    setLocalSetting(\"autoplay\", state.settings.autoplay);\n  }\n\n  if (state.settings.showFrameScrubber !== getLocalSetting(\"showFrameScrubber\")) {\n    setLocalSetting(\"showFrameScrubber\", state.settings.showFrameScrubber);\n  }\n\n  if (state.settings.showCoordinateLabels !== getLocalSetting(\"showCoordinateLabels\")) {\n    setLocalSetting(\"showCoordinateLabels\", state.settings.showCoordinateLabels);\n  }\n}\nexport default settingsSlice.reducer;","map":{"version":3,"sources":["/Users/yabu/CC/board/src/components/settings/settings-slice.js"],"names":["createSlice","getLocalSetting","setLocalSetting","initialSettings","initialState","settingsSlice","name","reducers","frameRateUpdated","state","action","frameRate","payload","themeSelected","theme","autoPlayUpdated","autoplay","showFrameScrubberUpdated","showFrameScrubber","showCoordinateLabelsUpdated","showCoordinateLabels","actions","currentFrameRate","settings","currentTheme","currentAutoplay","currentShowFrameScrubber","currentShowCoordinateLabels","settingsStoreListener","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { getLocalSetting, setLocalSetting } from \"../../app/storage\";\nimport { initialSettings as initialState } from \"./defaults\";\n\nexport const settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    frameRateUpdated(state, action) {\n      state.frameRate = action.payload;\n    },\n    themeSelected(state, action) {\n      state.theme = action.payload;\n    },\n    autoPlayUpdated(state, action) {\n      state.autoplay = action.payload;\n    },\n    showFrameScrubberUpdated(state, action) {\n      state.showFrameScrubber = action.payload;\n    },\n    showCoordinateLabelsUpdated(state, action) {\n      state.showCoordinateLabels = action.payload;\n    }\n  }\n});\n\n// toolkit generates the actions for us\nexport const {\n  frameRateUpdated,\n  themeSelected,\n  autoPlayUpdated,\n  showFrameScrubberUpdated,\n  showCoordinateLabelsUpdated\n} = settingsSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const currentFrameRate = state => state.settings.frameRate;\nexport const currentTheme = state => state.settings.theme;\nexport const currentAutoplay = state => state.settings.autoplay;\nexport const currentShowFrameScrubber = state =>\n  state.settings.showFrameScrubber;\nexport const currentShowCoordinateLabels = state =>\n  state.settings.showCoordinateLabels;\n\nexport function settingsStoreListener(state) {\n  if (state.settings.frameRate !== getLocalSetting(\"frameRate\")) {\n    setLocalSetting(\"frameRate\", state.settings.frameRate);\n  }\n\n  if (state.settings.theme !== getLocalSetting(\"theme\")) {\n    setLocalSetting(\"theme\", state.settings.theme);\n  }\n\n  if (state.settings.autoplay !== getLocalSetting(\"autoplay\")) {\n    setLocalSetting(\"autoplay\", state.settings.autoplay);\n  }\n\n  if (\n    state.settings.showFrameScrubber !== getLocalSetting(\"showFrameScrubber\")\n  ) {\n    setLocalSetting(\"showFrameScrubber\", state.settings.showFrameScrubber);\n  }\n\n  if (\n    state.settings.showCoordinateLabels !==\n    getLocalSetting(\"showCoordinateLabels\")\n  ) {\n    setLocalSetting(\n      \"showCoordinateLabels\",\n      state.settings.showCoordinateLabels\n    );\n  }\n}\n\nexport default settingsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}