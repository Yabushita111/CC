{"ast":null,"code":"import ReconnectingWebsocket from\"./reconnecting-websocket\";// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url,receive){var turns={};var done=false;return new Promise(function(resolve,reject){var ws=new ReconnectingWebsocket(url);ws.addEventListener(\"message\",function(e){var obj=JSON.parse(e.data);var eventData=obj.Data;if(turns[eventData.Turn]){return;}turns[eventData.Turn]=true;done=receive(obj);if(done){ws.close();resolve();}});ws.addEventListener(\"onerror\",function(e){reject(e);});ws.addEventListener(\"onclose\",function(e){if(!done){done=true;resolve();}});});}","map":{"version":3,"sources":["/Users/yabu/CC/board/src/io/websocket.js"],"names":["ReconnectingWebsocket","streamAll","url","receive","turns","done","Promise","resolve","reject","ws","addEventListener","e","obj","JSON","parse","data","eventData","Data","Turn","close"],"mappings":"AAAA,MAAOA,CAAAA,qBAAP,KAAkC,0BAAlC,CAEA;AACA;AACA;AACA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,GAAnB,CAAwBC,OAAxB,CAAiC,CACtC,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,GAAIC,CAAAA,IAAI,CAAG,KAAX,CAEA,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC,GAAMC,CAAAA,EAAE,CAAG,GAAIT,CAAAA,qBAAJ,CAA0BE,GAA1B,CAAX,CACAO,EAAE,CAACC,gBAAH,CAAoB,SAApB,CAA+B,SAAAC,CAAC,CAAI,CAClC,GAAMC,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAZ,CACA,GAAMC,CAAAA,SAAS,CAAGJ,GAAG,CAACK,IAAtB,CACA,GAAIb,KAAK,CAACY,SAAS,CAACE,IAAX,CAAT,CAA2B,CACzB,OACD,CACDd,KAAK,CAACY,SAAS,CAACE,IAAX,CAAL,CAAwB,IAAxB,CAEAb,IAAI,CAAGF,OAAO,CAACS,GAAD,CAAd,CACA,GAAIP,IAAJ,CAAU,CACRI,EAAE,CAACU,KAAH,GACAZ,OAAO,GACR,CACF,CAbD,EAeAE,EAAE,CAACC,gBAAH,CAAoB,SAApB,CAA+B,SAAAC,CAAC,CAAI,CAClCH,MAAM,CAACG,CAAD,CAAN,CACD,CAFD,EAIAF,EAAE,CAACC,gBAAH,CAAoB,SAApB,CAA+B,SAAAC,CAAC,CAAI,CAClC,GAAI,CAACN,IAAL,CAAW,CACTA,IAAI,CAAG,IAAP,CACAE,OAAO,GACR,CACF,CALD,EAMD,CA3BM,CAAP,CA4BD","sourcesContent":["import ReconnectingWebsocket from \"./reconnecting-websocket\";\n\n// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url, receive) {\n  const turns = {};\n  let done = false;\n\n  return new Promise((resolve, reject) => {\n    const ws = new ReconnectingWebsocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      const eventData = obj.Data;\n      if (turns[eventData.Turn]) {\n        return;\n      }\n      turns[eventData.Turn] = true;\n\n      done = receive(obj);\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}